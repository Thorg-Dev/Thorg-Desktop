<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <!-- Progress bar -->

    <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="AliceBlue"/>
        <Setter Property="Foreground" Value="blue"/>
    </Style>

    <Style TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>
    

    <!-- MAIN PANEL -->

    <SolidColorBrush x:Key="Dashboard.Background" Color="#110D39"></SolidColorBrush>
    
    <Style x:Key="PageBackground" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource Dashboard.Background}"/>
    </Style>
    
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="InfoLabel" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
    </Style>
    <!-- BLUE PANEL  -->

    <BlurEffect x:Key="BlueBox.Effect2" Radius="2" KernelType="Gaussian" />


    <DropShadowEffect x:Key="BlueBox.Effect" BlurRadius="10"  ShadowDepth="5" Color="#06D0BA" Opacity="0.25" Direction="-45">
    </DropShadowEffect>
    <SolidColorBrush x:Key="BlueBox.Background" Color="#120539" Opacity="0.60"></SolidColorBrush>
    <SolidColorBrush x:Key="BlueBox.Border" Color="#bbb" Opacity="0.3"></SolidColorBrush>
    <Style x:Key="BorderStyleBlueBox" TargetType="{x:Type Border}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{StaticResource BlueBox.Border}"/>
        <Setter Property="Background" Value="{StaticResource BlueBox.Background}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Effect" Value="{StaticResource BlueBox.Effect}"/>
    </Style>

    <Style x:Key="BlueBoxTitle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="BlueBoxTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
    </Style>


    <!-- Navigation control styles -->

    <Style x:Key="NavigationRibbon" TargetType="{x:Type Grid}">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Style.Resources>
            <Style TargetType="{x:Type Ellipse}">
                <Setter Property="Width" Value="24" />
                <Setter Property="Height" Value="24" />
                <Setter Property="Margin" Value="0,0,0,0" />
                <Setter Property="Fill" Value="Green" />
            </Style>
            <Style TargetType="{x:Type Label}">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="Foreground" Value="White" />
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="NavigationRibbonElementInactive" TargetType="{x:Type Label}">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="Gray" />
    </Style>

    <Style x:Key="NavigationRibbonElementActive" TargetType="{x:Type Label}">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="NavigationRibbonSeparator" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="White" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="3" />
        <Setter Property="Margin" Value="4,0,4,0" />
    </Style>

    <Style x:Key="NavigationRibbonActiveEllipse" TargetType="{x:Type Ellipse}">
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Fill" Value="Green" />
    </Style>

    <!-- BLUE BUTTON  -->
    
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Button.Static.Background" Color="#261D5E"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#74708C"/>
    <SolidColorBrush x:Key="Button.Static.Foreground" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="blue"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#74708C"/>
    <SolidColorBrush x:Key="Button.MouseOver.Foreground" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="white"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#74708C"/>
    <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="black"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#261D5E"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#74708C"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#AAAAAA"/>
    <Style x:Key="BlueButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Static.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Static.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Static.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Static.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.MouseOver.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Pressed.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- PINK BUTTON  -->

    <SolidColorBrush x:Key="ButtonPink.Static.Background" Color="#D119AE"/>
    <SolidColorBrush x:Key="ButtonPink.Static.Border" Color="#74708C"/>
    <SolidColorBrush x:Key="ButtonPink.Static.Foreground" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="ButtonPink.MouseOver.Background" Color="#E139DE"/>
    <SolidColorBrush x:Key="ButtonPink.MouseOver.Border" Color="#74708C"/>
    <SolidColorBrush x:Key="ButtonPink.MouseOver.Foreground" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="ButtonPink.Pressed.Background" Color="white"/>
    <SolidColorBrush x:Key="ButtonPink.Pressed.Border" Color="#74708C"/>
    <SolidColorBrush x:Key="ButtonPink.Pressed.Foreground" Color="black"/>
    <SolidColorBrush x:Key="ButtonPink.Disabled.Background" Color="#261D5E"/>
    <SolidColorBrush x:Key="ButtonPink.Disabled.Border" Color="#74708C"/>
    <SolidColorBrush x:Key="ButtonPink.Disabled.Foreground" Color="#AAAAAA"/>
    <Style x:Key="PinkButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonPink.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonPink.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonPink.Static.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPink.Static.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonPink.Static.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonPink.Static.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPink.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonPink.MouseOver.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonPink.MouseOver.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPink.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonPink.Pressed.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonPink.Pressed.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPink.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonPink.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonPink.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HyperLinkButtonStyle" TargetType="Button">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock>
                    <Hyperlink TextDecorations="None" Foreground="#88f" FontFamily="Arial">
                        <Run Text="{TemplateBinding Content}" />
                    </Hyperlink>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ButtonGradient.Static.BackgroundGradientStopLeft" Color="#00FFD7"/>
    <SolidColorBrush x:Key="ButtonGradient.Static.BackgroundGradientStopCenter" Color="#006CFF"/>
    <SolidColorBrush x:Key="ButtonGradient.Static.BackgroundGradientStopRight" Color="#FF0697"/>
    <SolidColorBrush x:Key="ButtonGradient.Static.LighterBackgroundGradientStopLeft" Color="#FFA3FFF1"/>
    <SolidColorBrush x:Key="ButtonGradient.Static.LighterBackgroundGradientStopCenter" Color="#FF4B97FF"/>
    <SolidColorBrush x:Key="ButtonGradient.Static.LighterBackgroundGradientStopRight" Color="#FFFF56B8"/>
    <Style x:Key="GradientButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <!--<Setter Property="Background" Value="{StaticResource ButtonPink.Static.Background}"/>-->

            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush  StartPoint="0,0" EndPoint="1,1">
                    <GradientStop Color="{Binding Source={StaticResource ButtonGradient.Static.BackgroundGradientStopLeft},Path=Color}" Offset="0"/>
                    <GradientStop Color="{Binding Source={StaticResource ButtonGradient.Static.BackgroundGradientStopCenter},Path=Color}" Offset="0.5"/>
                    <GradientStop Color="{Binding Source={StaticResource ButtonGradient.Static.BackgroundGradientStopRight},Path=Color}" Offset="1"/>

                </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonPink.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonPink.Static.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPink.Static.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonPink.Static.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonPink.Static.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush  StartPoint="0,0" EndPoint="1,1">
                                        <GradientStop Color="{Binding Source={StaticResource ButtonGradient.Static.LighterBackgroundGradientStopLeft},Path=Color}" Offset="0"/>
                                        <GradientStop Color="{Binding Source={StaticResource ButtonGradient.Static.LighterBackgroundGradientStopCenter},Path=Color}" Offset="0.5"/>
                                        <GradientStop Color="{Binding Source={StaticResource ButtonGradient.Static.LighterBackgroundGradientStopRight},Path=Color}" Offset="1"/>

                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonPink.MouseOver.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonPink.MouseOver.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPink.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonPink.Pressed.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonPink.Pressed.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPink.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonPink.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ButtonPink.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="CheckBox.Slider.Active" Color="#0FB2AB"/>
    <SolidColorBrush x:Key="CheckBox.Slider.Inactive" Color="#F36986"/>
    <Style x:Key="CheckBoxSlider" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SliderCircle" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="11"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SliderCircle" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ThicknessAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SliderCircle" Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                <SplineThicknessKeyFrame KeyTime="00:00:00.2000000" Value="1,1,1,1"/>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <DockPanel x:Name="dockPanel">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                        <Border HorizontalAlignment="Left" x:Name="SliderBg" Width="25" BorderThickness="1,1,1,1" CornerRadius="8,8,8,8"  Height="15" RenderTransformOrigin="0.5,0.5" Margin="1,1,1,1" >
                            <Ellipse HorizontalAlignment="Left" x:Name="SliderCircle" Width="10" Height="10"  RenderTransformOrigin="0.5,0.5" Fill="White" >
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <TranslateTransform X="2" Y="0"/>
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                            </Trigger.EnterActions>
                            <Setter TargetName="SliderBg" Property="Background" Value="{StaticResource CheckBox.Slider.Active}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="SliderBg" Property="Background" Value="{StaticResource CheckBox.Slider.Inactive}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextColor}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="CheckBox.Gpu.Active" Color="#0FB2AB"/>
    <SolidColorBrush x:Key="CheckBox.Gpu.Inactive" Color="#FFdddddd"/>
    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
    <Style x:Key="CheckBoxGpu" TargetType="{x:Type CheckBox}">
        
        
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Content" Value=""></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Border HorizontalAlignment="Left" x:Name="GpuCheckboxBG" Width="15" Height="15" BorderThickness="1,1,1,1" CornerRadius="3,3,3,3"  Margin="0" >
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="GpuCheckboxBG" Property="Background" Value="{StaticResource CheckBox.Gpu.Active}" />
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="GpuCheckboxBG" Property="Background" Value="{StaticResource CheckBox.Gpu.Inactive}" />
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>